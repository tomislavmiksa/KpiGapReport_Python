# USED FOR DB ACCESS
import pyodbc
import sqlalchemy

# PYTHON DATA ANALYSIS LIBRARY
import pandas as pd
import numpy as np

# WRITING TO EXCEL FILE
import openpyxl as xl
from openpyxl import Workbook
from openpyxl.styles import PatternFill, Border, Side, Alignment, Protection, Font, Color
from openpyxl.formatting.rule import Rule, IconSet, FormatObject

import script_calc_kpi as ck

# CLASS: DEFINES INPUT
class OperatorKPIs:
    def __init__(self,server,database,table):
        self.server = server
        self.database = database
        self.table = table

# CLASS CREATE RANKING IN DATAFRAME
class Ranking:
    def __init__(self,kpis,parameters):
        self.df_with_ranking = pd.DataFrame()
        self.params          = parameters
        _kpi_info = [['CLASSIC_CSSR',0,'CLASSIC_FAILED',''],['CLASSIC_DCR',0,'CLASSIC_DROPPED',''],['CLASSIC_AVG_CST',1,'CLASSIC_COMPLETED',''],['CLASSIC_BAD_CST_RATIO',0,'CLASSIC_BAD_CST',''],['WHATSAPP_CSSR',0,'WHATSAPP_FAILED',''],['WHATSAPP_DCR',0,'WHATSAPP_DROPPED',''],['WHATSAPP_AVG_CST',1,'WHATSAPP_COMPLETED',''],['WHATSAPP_BAD_CST_RATIO',0,'WHATSAPP_BAD_CST',''],['CLASSIC_POLQA_BAD_RATIO',0,'CLASSIC_POLQA_BAD',''],['CLASSIC_POLQA_AVG_MOS',1,'CLASSIC_POLQA_ATTEMPTS',''],['WHATSAPP_POLQA_BAD_RATIO',0,'WHATSAPP_POLQA_BAD',''],['WHATSAPP_POLQA_AVG_MOS',1,'WHATSAPP_POLQA_ATTEMPTS',''],['HTTP_TRANSFER_FDFS_DL_SUCCESS_RATIO',0,'HTTP_TRANSFER_FDFS_DL_FAILED','HTTP_TRANSFER_FDFS_DL_CUTOFF'],['HTTP_TRANSFER_FDFS_UL_SUCCESS_RATIO',0,'HTTP_TRANSFER_FDFS_UL_FAILED','HTTP_TRANSFER_FDFS_UL_CUTOFF'],['HTTP_TRANSFER_FDTT_DL_MDR_P10',1,'HTTP_TRANSFER_FDTT_DL_ATTEMPTS',''],['HTTP_TRANSFER_FDTT_DL_MDR_AVG',1,'HTTP_TRANSFER_FDTT_DL_ATTEMPTS',''],['HTTP_TRANSFER_FDTT_UL_MDR_P10',1,'HTTP_TRANSFER_FDTT_UL_ATTEMPTS',''],['HTTP_TRANSFER_FDTT_UL_MDR_AVG',1,'HTTP_TRANSFER_FDTT_UL_ATTEMPTS',''],['HTTP_BROWSING_SUCCESS_RATIO',0,'HTTP_BROWSING_FAILED','HTTP_BROWSING_CUTOFF'],['VIDEO_STREAM_SUCCESS_RATIO',0,'VIDEO_STREAM_FAILED','VIDEO_STREAM_CUTOFF'],['VIDEO_STREAM_IRRITATING_PLAYOUT_RATIO',0,'VIDEO_STREAM_IRRITATING_PLAYOUT',''],['VIDEO_STREAM_VMOS_AVG',1,'VIDEO_STREAM_SUCCESS',''],['VIDEO_STREAM_TTFP_AVG',1,'VIDEO_STREAM_SUCCESS',''],['VIDEO_STREAM_TTFP_BAD_RATIO',0,'VIDEO_STREAM_TTFP_BAD',''],['FACEBOOK_FDFS_UL_SUCCESS_RATIO',0,'FACEBOOK_FDFS_UL_FAILED_RATIO','FACEBOOK_FDFS_UL_CUTOFF_RATIO'],['FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG',1,'FACEBOOK_FDFS_UL_SUCCESS','']]
        _kpis = pd.DataFrame(_kpi_info, columns=['kpi_name', 'depndancies', 'kn1','kn2'])
        for index,row in kpis.iterrows():
            i = 0
            for kpi_name in _kpis['kpi_name']:
                i += 1
                _result = self.ranking_calculate(g_lev_1=row.G_LEVEL_1,
                                                 g_lev_2=row.G_LEVEL_2,
                                                 kpi_value=row[kpi_name],
                                                 kpi_key =  i,
                                                 ranking_params_df = self.params)
                row[kpi_name + "_THRESHOLDS_LOW"]    = _result[0]
                row[kpi_name + "_THRESHOLDS_MEDIUM"] = _result[1]
                row[kpi_name + "_THRESHOLDS_HIGH"]   = _result[2]
                row[kpi_name + "_MAXIMUM_POINTS"]    = _result[3]
                row[kpi_name + "_RANKING"]           = _result[4]
                row[kpi_name + "_GAP"]               = _result[5]
            self.df_with_ranking = self.df_with_ranking.append(row)

        # TOTAL MODULE GAPS
        _total = self.df_with_ranking[self.df_with_ranking.kpi_levels == 'g2']
        for i, total in _total.iterrows():
            for index, row in self.df_with_ranking.iterrows():
                if (total.G_LEVEL_1 == row.G_LEVEL_1) and (total.G_LEVEL_2 == row.G_LEVEL_2):
                    # CALCULATION OF THE MODEL 1 AS AGRRED WITH NEMANJA
                    if total['CLASSIC_FAILED'] > 0:
                        self.df_with_ranking.loc[index, 'CLASSIC_CSSR_POINTS_LOST']           = 1.0 * row['CLASSIC_FAILED']    / total['CLASSIC_FAILED']      * total['CLASSIC_CSSR_GAP']
                    if total['CLASSIC_DROPPED'] > 0:
                        self.df_with_ranking.loc[index, 'CLASSIC_DCR_POINTS_LOST']            = 1.0 * row['CLASSIC_DROPPED']   / total['CLASSIC_DROPPED']     * total['CLASSIC_DCR_GAP']
                    if total['CLASSIC_COMPLETED'] > 0 and (total['CLASSIC_AVG_CST'] - total['CLASSIC_AVG_CST_THRESHOLDS_HIGH']) != 0:
                        self.df_with_ranking.loc[index, 'CLASSIC_AVG_CST_POINTS_LOST']        = 1.0 * row['CLASSIC_COMPLETED'] / total['CLASSIC_COMPLETED']   * total['CLASSIC_AVG_CST_GAP'] * (row['CLASSIC_AVG_CST'] - row['CLASSIC_AVG_CST_THRESHOLDS_HIGH']) / (total['CLASSIC_AVG_CST'] - total['CLASSIC_AVG_CST_THRESHOLDS_HIGH'])
                    if  total['CLASSIC_BAD_CST'] > 0:
                        self.df_with_ranking.loc[index, 'CLASSIC_BAD_CST_RATIO_POINTS_LOST']  = 1.0 * row['CLASSIC_BAD_CST']   / total['CLASSIC_BAD_CST']     * total['CLASSIC_BAD_CST_RATIO_GAP']
                    if total['WHATSAPP_FAILED'] > 0:
                        self.df_with_ranking.loc[index, 'WHATSAPP_CSSR_POINTS_LOST']           = 1.0 * row['WHATSAPP_FAILED']    / total['WHATSAPP_FAILED']      * total['WHATSAPP_CSSR_GAP']
                    if total['WHATSAPP_DROPPED'] > 0:
                        self.df_with_ranking.loc[index, 'WHATSAPP_DCR_POINTS_LOST']            = 1.0 * row['WHATSAPP_DROPPED']   / total['WHATSAPP_DROPPED']     * total['WHATSAPP_DCR_GAP']
                    if total['WHATSAPP_COMPLETED'] > 0 and (total['WHATSAPP_AVG_CST'] - total['WHATSAPP_AVG_CST_THRESHOLDS_HIGH']) != 0:
                        self.df_with_ranking.loc[index, 'WHATSAPP_AVG_CST_POINTS_LOST']        = 1.0 * row['WHATSAPP_COMPLETED'] / total['WHATSAPP_COMPLETED']   * total['WHATSAPP_AVG_CST_GAP'] * (row['WHATSAPP_AVG_CST'] - row['WHATSAPP_AVG_CST_THRESHOLDS_HIGH']) / (total['WHATSAPP_AVG_CST'] - total['WHATSAPP_AVG_CST_THRESHOLDS_HIGH'])
                    if total['WHATSAPP_BAD_CST'] > 0:
                        self.df_with_ranking.loc[index, 'WHATSAPP_BAD_CST_RATIO_POINTS_LOST']  = 1.0 * row['WHATSAPP_BAD_CST']   / total['WHATSAPP_BAD_CST']     * total['WHATSAPP_BAD_CST_RATIO_GAP']
                    if total['CLASSIC_POLQA_BAD'] > 0:
                        self.df_with_ranking.loc[index,'CLASSIC_POLQA_BAD_RATIO_POINTS_LOST'] = 1.0 * row['CLASSIC_POLQA_BAD'] / total['CLASSIC_POLQA_BAD'] * total['CLASSIC_POLQA_BAD_RATIO_GAP']
                    if  total['CLASSIC_POLQA_ATTEMPTS'] > 0 and (total['CLASSIC_POLQA_AVG_MOS_THRESHOLDS_HIGH'] -  total['CLASSIC_POLQA_AVG_MOS']) != 0:
                        self.df_with_ranking.loc[index,'CLASSIC_POLQA_AVG_MOS_POINTS_LOST'] = 1.0 * row['CLASSIC_POLQA_ATTEMPTS'] / total['CLASSIC_POLQA_ATTEMPTS'] * (row['CLASSIC_POLQA_AVG_MOS_THRESHOLDS_HIGH'] - row['CLASSIC_POLQA_AVG_MOS']) / (total['CLASSIC_POLQA_AVG_MOS_THRESHOLDS_HIGH'] -  total['CLASSIC_POLQA_AVG_MOS']) * total['CLASSIC_POLQA_AVG_MOS_GAP']
                    if total['WHATSAPP_POLQA_BAD'] > 0:
                        self.df_with_ranking.loc[index, 'WHATSAPP_POLQA_BAD_RATIO_POINTS_LOST'] = 1.0 * row['WHATSAPP_POLQA_BAD'] / total['WHATSAPP_POLQA_BAD'] * total['WHATSAPP_POLQA_BAD_RATIO_GAP']
                    if total['WHATSAPP_POLQA_ATTEMPTS'] > 0 and (total['WHATSAPP_POLQA_AVG_MOS_THRESHOLDS_HIGH'] - total['WHATSAPP_POLQA_AVG_MOS']) != 0:
                        self.df_with_ranking.loc[index, 'WHATSAPP_POLQA_AVG_MOS_POINTS_LOST'] = 1.0 * row['WHATSAPP_POLQA_ATTEMPTS'] / total['WHATSAPP_POLQA_ATTEMPTS'] * (row['WHATSAPP_POLQA_AVG_MOS_THRESHOLDS_HIGH'] - row['WHATSAPP_POLQA_AVG_MOS']) / ( total['WHATSAPP_POLQA_AVG_MOS_THRESHOLDS_HIGH'] - total['WHATSAPP_POLQA_AVG_MOS']) * total['WHATSAPP_POLQA_AVG_MOS_GAP']
                    if (total['HTTP_TRANSFER_FDFS_DL_FAILED'] + total['HTTP_TRANSFER_FDFS_DL_CUTOFF'] ) > 0:
                        self.df_with_ranking.loc[index, 'HTTP_TRANSFER_FDFS_DL_SUCCESS_RATIO_POINTS_LOST'] = 1.0 * (row['HTTP_TRANSFER_FDFS_DL_FAILED'] + row['HTTP_TRANSFER_FDFS_DL_CUTOFF'] ) / (total['HTTP_TRANSFER_FDFS_DL_FAILED'] + total['HTTP_TRANSFER_FDFS_DL_CUTOFF'] ) * total['HTTP_TRANSFER_FDFS_DL_SUCCESS_RATIO_GAP']
                    if (total['HTTP_TRANSFER_FDFS_UL_FAILED'] + total['HTTP_TRANSFER_FDFS_UL_CUTOFF']) > 0:
                        self.df_with_ranking.loc[index, 'HTTP_TRANSFER_FDFS_UL_SUCCESS_RATIO_POINTS_LOST'] = 1.0 * (row['HTTP_TRANSFER_FDFS_UL_FAILED'] + row['HTTP_TRANSFER_FDFS_UL_CUTOFF']) / (total['HTTP_TRANSFER_FDFS_UL_FAILED'] + total['HTTP_TRANSFER_FDFS_UL_CUTOFF']) * total[ 'HTTP_TRANSFER_FDFS_UL_SUCCESS_RATIO_GAP']
                    if total['HTTP_TRANSFER_FDTT_DL_SUCCESS'] > 0 and (total['HTTP_TRANSFER_FDTT_DL_MDR_P10_THRESHOLDS_HIGH'] - total['HTTP_TRANSFER_FDTT_DL_MDR_P10']) != 0:
                        self.df_with_ranking.loc[index, 'HTTP_TRANSFER_FDTT_DL_MDR_P10_POINTS_LOST'] = 1.0 * row['HTTP_TRANSFER_FDTT_DL_SUCCESS'] / total['HTTP_TRANSFER_FDTT_DL_SUCCESS'] * (row['HTTP_TRANSFER_FDTT_DL_MDR_P10_THRESHOLDS_HIGH'] - row['HTTP_TRANSFER_FDTT_DL_MDR_P10']) / ( total['HTTP_TRANSFER_FDTT_DL_MDR_P10_THRESHOLDS_HIGH'] - total['HTTP_TRANSFER_FDTT_DL_MDR_P10']) * total['HTTP_TRANSFER_FDTT_DL_MDR_P10_GAP']
                    if total['HTTP_TRANSFER_FDTT_DL_SUCCESS'] > 0 and (total['HTTP_TRANSFER_FDTT_DL_MDR_AVG_THRESHOLDS_HIGH'] - total['HTTP_TRANSFER_FDTT_DL_MDR_AVG']) != 0:
                        self.df_with_ranking.loc[index, 'HTTP_TRANSFER_FDTT_DL_MDR_AVG_POINTS_LOST'] = 1.0 * row['HTTP_TRANSFER_FDTT_DL_SUCCESS'] / total['HTTP_TRANSFER_FDTT_DL_SUCCESS'] * (row['HTTP_TRANSFER_FDTT_DL_MDR_AVG_THRESHOLDS_HIGH'] - row['HTTP_TRANSFER_FDTT_DL_MDR_AVG']) / ( total['HTTP_TRANSFER_FDTT_DL_MDR_AVG_THRESHOLDS_HIGH'] - total['HTTP_TRANSFER_FDTT_DL_MDR_AVG']) * total['HTTP_TRANSFER_FDTT_DL_MDR_AVG_GAP']
                    if total['HTTP_TRANSFER_FDTT_UL_SUCCESS'] > 0 and (total['HTTP_TRANSFER_FDTT_UL_MDR_P10_THRESHOLDS_HIGH'] - total['HTTP_TRANSFER_FDTT_UL_MDR_P10']) != 0:
                        self.df_with_ranking.loc[index, 'HTTP_TRANSFER_FDTT_UL_MDR_P10_POINTS_LOST'] = 1.0 * row['HTTP_TRANSFER_FDTT_UL_SUCCESS'] / total['HTTP_TRANSFER_FDTT_UL_SUCCESS'] * (row['HTTP_TRANSFER_FDTT_UL_MDR_P10_THRESHOLDS_HIGH'] - row['HTTP_TRANSFER_FDTT_UL_MDR_P10']) / ( total['HTTP_TRANSFER_FDTT_UL_MDR_P10_THRESHOLDS_HIGH'] - total['HTTP_TRANSFER_FDTT_UL_MDR_P10']) * total['HTTP_TRANSFER_FDTT_UL_MDR_P10_GAP']
                    if total['HTTP_TRANSFER_FDTT_UL_SUCCESS'] > 0 and (total['HTTP_TRANSFER_FDTT_UL_MDR_AVG_THRESHOLDS_HIGH'] - total['HTTP_TRANSFER_FDTT_UL_MDR_AVG']) != 0:
                        self.df_with_ranking.loc[index, 'HTTP_TRANSFER_FDTT_UL_MDR_AVG_POINTS_LOST'] = 1.0 * row['HTTP_TRANSFER_FDTT_UL_SUCCESS'] / total['HTTP_TRANSFER_FDTT_UL_SUCCESS'] * (row['HTTP_TRANSFER_FDTT_UL_MDR_AVG_THRESHOLDS_HIGH'] - row['HTTP_TRANSFER_FDTT_UL_MDR_AVG']) / ( total['HTTP_TRANSFER_FDTT_UL_MDR_AVG_THRESHOLDS_HIGH'] - total['HTTP_TRANSFER_FDTT_UL_MDR_AVG']) * total['HTTP_TRANSFER_FDTT_UL_MDR_AVG_GAP']
                    if (total['HTTP_BROWSING_FAILED'] + total['HTTP_BROWSING_CUTOFF'] ) > 0:
                        self.df_with_ranking.loc[index, 'HTTP_BROWSING_SUCCESS_RATIO_POINTS_LOST'] = 1.0 * (row['HTTP_BROWSING_FAILED'] + row['HTTP_BROWSING_CUTOFF'] ) / (total['HTTP_BROWSING_FAILED'] + total['HTTP_BROWSING_CUTOFF'] ) * total['HTTP_BROWSING_SUCCESS_RATIO_GAP']
                    if (total['VIDEO_STREAM_FAILED'] + total['VIDEO_STREAM_CUTOFF'] ) > 0:
                        self.df_with_ranking.loc[index, 'VIDEO_STREAM_SUCCESS_RATIO_POINTS_LOST'] = 1.0 * (row['VIDEO_STREAM_FAILED'] + row['VIDEO_STREAM_CUTOFF'] ) / (total['VIDEO_STREAM_FAILED'] + total['VIDEO_STREAM_CUTOFF'] ) * total['VIDEO_STREAM_SUCCESS_RATIO_GAP']
                    if (total['VIDEO_STREAM_IRRITATING_PLAYOUT'] ) > 0:
                        self.df_with_ranking.loc[index, 'VIDEO_STREAM_IRRITATING_PLAYOUT_POINTS_LOST'] = 1.0 * row['VIDEO_STREAM_IRRITATING_PLAYOUT'] / total['VIDEO_STREAM_IRRITATING_PLAYOUT']  * total['VIDEO_STREAM_IRRITATING_PLAYOUT_RATIO_GAP']
                    if total['VIDEO_STREAM_SUCCESS'] > 0 and (total['VIDEO_STREAM_VMOS_AVG_THRESHOLDS_HIGH'] - total['VIDEO_STREAM_VMOS_AVG']) != 0:
                        self.df_with_ranking.loc[index, 'VIDEO_STREAM_VMOS_AVG_POINTS_LOST'] = 1.0 * row['VIDEO_STREAM_SUCCESS'] / total['VIDEO_STREAM_SUCCESS'] * (row['VIDEO_STREAM_VMOS_AVG_THRESHOLDS_HIGH'] - row['VIDEO_STREAM_VMOS_AVG']) / ( total['VIDEO_STREAM_VMOS_AVG_THRESHOLDS_HIGH'] - total['VIDEO_STREAM_VMOS_AVG']) * total['VIDEO_STREAM_VMOS_AVG_GAP']
                    if total['VIDEO_STREAM_SUCCESS'] > 0 and (total['VIDEO_STREAM_TTFP_AVG_THRESHOLDS_HIGH'] - total['VIDEO_STREAM_TTFP_AVG']) != 0:
                        self.df_with_ranking.loc[index, 'VIDEO_STREAM_TTFP_AVG_POINTS_LOST'] = 1.0 * row['VIDEO_STREAM_SUCCESS'] / total['VIDEO_STREAM_SUCCESS'] * (row['VIDEO_STREAM_TTFP_AVG_THRESHOLDS_HIGH'] - row['VIDEO_STREAM_TTFP_AVG']) / ( total['VIDEO_STREAM_TTFP_AVG_THRESHOLDS_HIGH'] - total['VIDEO_STREAM_TTFP_AVG']) * total['VIDEO_STREAM_TTFP_AVG_GAP']
                    if (total['VIDEO_STREAM_TTFP_BAD'] ) > 0:
                        self.df_with_ranking.loc[index, 'VIDEO_STREAM_TTFP_BAD_RATIO_POINTS_LOST'] = 1.0 * row['VIDEO_STREAM_TTFP_BAD'] / total['VIDEO_STREAM_TTFP_BAD']  * total['VIDEO_STREAM_TTFP_BAD_RATIO_GAP']
                    if (total['FACEBOOK_FDFS_UL_FAILED'] + total['FACEBOOK_FDFS_UL_CUTOFF'] ) > 0:
                        self.df_with_ranking.loc[index, 'FACEBOOK_FDFS_UL_SUCCESS_RATIO_POINTS_LOST'] = 1.0 * (row['FACEBOOK_FDFS_UL_FAILED'] + row['FACEBOOK_FDFS_UL_CUTOFF'] ) / (total['FACEBOOK_FDFS_UL_FAILED'] + total['FACEBOOK_FDFS_UL_CUTOFF'] ) * total['FACEBOOK_FDFS_UL_SUCCESS_RATIO_GAP']
                    if total['FACEBOOK_FDFS_UL_SUCCESS'] > 0 and (total['FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG_THRESHOLDS_HIGH'] - total['FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG']) != 0:
                        self.df_with_ranking.loc[index, 'FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG_POINTS_LOST'] = 1.0 * row['FACEBOOK_FDFS_UL_SUCCESS'] / total['FACEBOOK_FDFS_UL_SUCCESS'] * (row['FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG_THRESHOLDS_HIGH'] - row['FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG']) / ( total['FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG_THRESHOLDS_HIGH'] - total['FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG']) * total['FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG_GAP']

                    # CALCULATION OF THE MODEL 2 AS AGRRED WITH NEMANJA
                    if total['CLASSIC_FAILED'] > 0:
                        self.df_with_ranking.loc[index, 'CLASSIC_CSSR_POINTS_LOST_M2']           = 1.0 * row['CLASSIC_FAILED']    / total['CLASSIC_FAILED']      * total['CLASSIC_CSSR_GAP']
                    if total['CLASSIC_DROPPED'] > 0:
                        self.df_with_ranking.loc[index, 'CLASSIC_DCR_POINTS_LOST_M2']            = 1.0 * row['CLASSIC_DROPPED']   / total['CLASSIC_DROPPED']     * total['CLASSIC_DCR_GAP']
                    if total['CLASSIC_COMPLETED'] > 0:
                        self.df_with_ranking.loc[index, 'CLASSIC_AVG_CST_POINTS_LOST_M2']        = 1.0 * row['CLASSIC_COMPLETED'] / total['CLASSIC_COMPLETED']   * total['CLASSIC_AVG_CST_GAP']
                    if  total['CLASSIC_BAD_CST'] > 0:
                        self.df_with_ranking.loc[index, 'CLASSIC_BAD_CST_RATIO_POINTS_LOST_M2']  = 1.0 * row['CLASSIC_BAD_CST']   / total['CLASSIC_BAD_CST']     * total['CLASSIC_BAD_CST_RATIO_GAP']
                    if total['WHATSAPP_FAILED'] > 0:
                        self.df_with_ranking.loc[index, 'WHATSAPP_CSSR_POINTS_LOST_M2']           = 1.0 * row['WHATSAPP_FAILED']    / total['WHATSAPP_FAILED']      * total['WHATSAPP_CSSR_GAP']
                    if total['WHATSAPP_DROPPED'] > 0:
                        self.df_with_ranking.loc[index, 'WHATSAPP_DCR_POINTS_LOST_M2']            = 1.0 * row['WHATSAPP_DROPPED']   / total['WHATSAPP_DROPPED']     * total['WHATSAPP_DCR_GAP']
                    if total['WHATSAPP_COMPLETED'] > 0:
                        self.df_with_ranking.loc[index, 'WHATSAPP_AVG_CST_POINTS_LOST_M2']        = 1.0 * row['WHATSAPP_COMPLETED'] / total['WHATSAPP_COMPLETED']   * total['WHATSAPP_AVG_CST_GAP']
                    if total['WHATSAPP_BAD_CST'] > 0:
                        self.df_with_ranking.loc[index, 'WHATSAPP_BAD_CST_RATIO_POINTS_LOST_M2']  = 1.0 * row['WHATSAPP_BAD_CST']   / total['WHATSAPP_BAD_CST']     * total['WHATSAPP_BAD_CST_RATIO_GAP']
                    if total['CLASSIC_POLQA_BAD'] > 0:
                        self.df_with_ranking.loc[index,'CLASSIC_POLQA_BAD_RATIO_POINTS_LOST_M2'] = 1.0 * row['CLASSIC_POLQA_BAD'] / total['CLASSIC_POLQA_BAD'] * total['CLASSIC_POLQA_BAD_RATIO_GAP']
                    if  total['CLASSIC_POLQA_ATTEMPTS'] > 0:
                        self.df_with_ranking.loc[index,'CLASSIC_POLQA_AVG_MOS_POINTS_LOST_M2'] = 1.0 * row['CLASSIC_POLQA_ATTEMPTS'] / total['CLASSIC_POLQA_ATTEMPTS'] * total['CLASSIC_POLQA_AVG_MOS_GAP']
                    if total['WHATSAPP_POLQA_BAD'] > 0:
                        self.df_with_ranking.loc[index, 'WHATSAPP_POLQA_BAD_RATIO_POINTS_LOST_M2'] = 1.0 * row['WHATSAPP_POLQA_BAD'] / total['WHATSAPP_POLQA_BAD'] * total['WHATSAPP_POLQA_BAD_RATIO_GAP']
                    if total['WHATSAPP_POLQA_ATTEMPTS'] > 0:
                        self.df_with_ranking.loc[index, 'WHATSAPP_POLQA_AVG_MOS_POINTS_LOST_M2'] = 1.0 * row['WHATSAPP_POLQA_ATTEMPTS'] / total['WHATSAPP_POLQA_ATTEMPTS'] * total['WHATSAPP_POLQA_AVG_MOS_GAP']
                    if (total['HTTP_TRANSFER_FDFS_DL_FAILED'] + total['HTTP_TRANSFER_FDFS_DL_CUTOFF'] ) > 0:
                        self.df_with_ranking.loc[index, 'HTTP_TRANSFER_FDFS_DL_SUCCESS_RATIO_POINTS_LOST_M2'] = 1.0 * (row['HTTP_TRANSFER_FDFS_DL_FAILED'] + row['HTTP_TRANSFER_FDFS_DL_CUTOFF'] ) / (total['HTTP_TRANSFER_FDFS_DL_FAILED'] + total['HTTP_TRANSFER_FDFS_DL_CUTOFF'] ) * total['HTTP_TRANSFER_FDFS_DL_SUCCESS_RATIO_GAP']
                    if (total['HTTP_TRANSFER_FDFS_UL_FAILED'] + total['HTTP_TRANSFER_FDFS_UL_CUTOFF']) > 0:
                        self.df_with_ranking.loc[index, 'HTTP_TRANSFER_FDFS_UL_SUCCESS_RATIO_POINTS_LOST_M2'] = 1.0 * (row['HTTP_TRANSFER_FDFS_UL_FAILED'] + row['HTTP_TRANSFER_FDFS_UL_CUTOFF']) / (total['HTTP_TRANSFER_FDFS_UL_FAILED'] + total['HTTP_TRANSFER_FDFS_UL_CUTOFF']) * total[ 'HTTP_TRANSFER_FDFS_UL_SUCCESS_RATIO_GAP']
                    if total['HTTP_TRANSFER_FDTT_DL_SUCCESS'] > 0:
                        self.df_with_ranking.loc[index, 'HTTP_TRANSFER_FDTT_DL_MDR_P10_POINTS_LOST_M2'] = 1.0 * row['HTTP_TRANSFER_FDTT_DL_SUCCESS'] / total['HTTP_TRANSFER_FDTT_DL_SUCCESS'] * total['HTTP_TRANSFER_FDTT_DL_MDR_P10_GAP']
                    if total['HTTP_TRANSFER_FDTT_DL_SUCCESS'] > 0:
                        self.df_with_ranking.loc[index, 'HTTP_TRANSFER_FDTT_DL_MDR_AVG_POINTS_LOST_M2'] = 1.0 * row['HTTP_TRANSFER_FDTT_DL_SUCCESS'] / total['HTTP_TRANSFER_FDTT_DL_SUCCESS'] * total['HTTP_TRANSFER_FDTT_DL_MDR_AVG_GAP']
                    if total['HTTP_TRANSFER_FDTT_UL_SUCCESS'] > 0:
                        self.df_with_ranking.loc[index, 'HTTP_TRANSFER_FDTT_UL_MDR_P10_POINTS_LOST_M2'] = 1.0 * row['HTTP_TRANSFER_FDTT_UL_SUCCESS'] / total['HTTP_TRANSFER_FDTT_UL_SUCCESS'] * total['HTTP_TRANSFER_FDTT_UL_MDR_P10_GAP']
                    if total['HTTP_TRANSFER_FDTT_UL_SUCCESS'] > 0:
                        self.df_with_ranking.loc[index, 'HTTP_TRANSFER_FDTT_UL_MDR_AVG_POINTS_LOST_M2'] = 1.0 * row['HTTP_TRANSFER_FDTT_UL_SUCCESS'] / total['HTTP_TRANSFER_FDTT_UL_SUCCESS'] * total['HTTP_TRANSFER_FDTT_UL_MDR_AVG_GAP']
                    if (total['HTTP_BROWSING_FAILED'] + total['HTTP_BROWSING_CUTOFF'] ) > 0:
                        self.df_with_ranking.loc[index, 'HTTP_BROWSING_SUCCESS_RATIO_POINTS_LOST_M2'] = 1.0 * (row['HTTP_BROWSING_FAILED'] + row['HTTP_BROWSING_CUTOFF'] ) / (total['HTTP_BROWSING_FAILED'] + total['HTTP_BROWSING_CUTOFF'] ) * total['HTTP_BROWSING_SUCCESS_RATIO_GAP']
                    if (total['VIDEO_STREAM_FAILED'] + total['VIDEO_STREAM_CUTOFF'] ) > 0:
                        self.df_with_ranking.loc[index, 'VIDEO_STREAM_SUCCESS_RATIO_POINTS_LOST_M2'] = 1.0 * (row['VIDEO_STREAM_FAILED'] + row['VIDEO_STREAM_CUTOFF'] ) / (total['VIDEO_STREAM_FAILED'] + total['VIDEO_STREAM_CUTOFF'] ) * total['VIDEO_STREAM_SUCCESS_RATIO_GAP']
                    if (total['VIDEO_STREAM_IRRITATING_PLAYOUT'] ) > 0:
                        self.df_with_ranking.loc[index, 'VIDEO_STREAM_IRRITATING_PLAYOUT_POINTS_LOST_M2'] = 1.0 * row['VIDEO_STREAM_IRRITATING_PLAYOUT'] / total['VIDEO_STREAM_IRRITATING_PLAYOUT']  * total['VIDEO_STREAM_IRRITATING_PLAYOUT_RATIO_GAP']
                    if total['VIDEO_STREAM_SUCCESS'] > 0:
                        self.df_with_ranking.loc[index, 'VIDEO_STREAM_VMOS_AVG_POINTS_LOST_M2'] = 1.0 * row['VIDEO_STREAM_SUCCESS'] / total['VIDEO_STREAM_SUCCESS'] * total['VIDEO_STREAM_VMOS_AVG_GAP']
                    if total['VIDEO_STREAM_SUCCESS'] > 0:
                        self.df_with_ranking.loc[index, 'VIDEO_STREAM_TTFP_AVG_POINTS_LOST_M2'] = 1.0 * row['VIDEO_STREAM_SUCCESS'] / total['VIDEO_STREAM_SUCCESS'] * total['VIDEO_STREAM_TTFP_AVG_GAP']
                    if (total['VIDEO_STREAM_TTFP_BAD'] ) > 0:
                        self.df_with_ranking.loc[index, 'VIDEO_STREAM_TTFP_BAD_RATIO_POINTS_LOST_M2'] = 1.0 * row['VIDEO_STREAM_TTFP_BAD'] / total['VIDEO_STREAM_TTFP_BAD']  * total['VIDEO_STREAM_TTFP_BAD_RATIO_GAP']
                    if (total['FACEBOOK_FDFS_UL_FAILED'] + total['FACEBOOK_FDFS_UL_CUTOFF'] ) > 0:
                        self.df_with_ranking.loc[index, 'FACEBOOK_FDFS_UL_SUCCESS_RATIO_POINTS_LOST_M2'] = 1.0 * (row['FACEBOOK_FDFS_UL_FAILED'] + row['FACEBOOK_FDFS_UL_CUTOFF'] ) / (total['FACEBOOK_FDFS_UL_FAILED'] + total['FACEBOOK_FDFS_UL_CUTOFF'] ) * total['FACEBOOK_FDFS_UL_SUCCESS_RATIO_GAP']
                    if total['FACEBOOK_FDFS_UL_SUCCESS'] > 0:
                        self.df_with_ranking.loc[index, 'FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG_POINTS_LOST_M2'] = 1.0 * row['FACEBOOK_FDFS_UL_SUCCESS'] / total['FACEBOOK_FDFS_UL_SUCCESS'] * total['FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG_GAP']


        # NORMALIZE WITH MODULE
        self.df_with_ranking = self.df_with_ranking[
                ['kpi_levels', 'grp_index', 'G_LEVEL_1', 'G_LEVEL_2', 'G_LEVEL_3', 'G_LEVEL_4', 'G_LEVEL_5',
                 'TRAIN_INFO',
                 'VENDOR', 'START_TIME', 'END_TIME', 'CLASSIC_ATTEMPTS', 'CLASSIC_COMPLETED', 'CLASSIC_FAILED',
                 'CLASSIC_DROPPED', 'CLASSIC_CSSR', 'CLASSIC_DCR', 'CLASSIC_CSR', 'CLASSIC_MIN_CST', 'CLASSIC_AVG_CST',
                 'CLASSIC_MAX_CST', 'CLASSIC_P10_CST', 'CLASSIC_P50_CST', 'CLASSIC_P90_CST', 'CLASSIC_BAD_CST',
                 'CLASSIC_OKK_CST', 'CLASSIC_BAD_CST_RATIO', 'VOLTE_CM', 'VOLTE_CM_RATIO', 'VOLTE_CM_END_RATIO',
                 'CSFB_CM',
                 'WHATSAPP_ATTEMPTS', 'WHATSAPP_COMPLETED', 'WHATSAPP_FAILED', 'WHATSAPP_DROPPED', 'WHATSAPP_CSSR',
                 'WHATSAPP_DCR', 'WHATSAPP_CSR', 'WHATSAPP_MIN_CST', 'WHATSAPP_AVG_CST', 'WHATSAPP_MAX_CST',
                 'WHATSAPP_P10_CST', 'WHATSAPP_P50_CST', 'WHATSAPP_P90_CST', 'WHATSAPP_BAD_CST', 'WHATSAPP_OKK_CST',
                 'WHATSAPP_BAD_CST_RATIO', 'CLASSIC_POLQA_ATTEMPTS', 'CLASSIC_POLQA_BAD', 'CLASSIC_POLQA_BAD_RATIO',
                 'CLASSIC_POLQA_MIN_MOS', 'CLASSIC_POLQA_AVG_MOS', 'CLASSIC_POLQA_MAX_MOS', 'CLASSIC_POLQA_P10_MOS',
                 'CLASSIC_POLQA_P50_MOS', 'CLASSIC_POLQA_P90_MOS', 'CLASSIC_POLQA_VOLTE_MIN_MOS',
                 'CLASSIC_POLQA_VOLTE_AVG_MOS', 'CLASSIC_POLQA_VOLTE_MAX_MOS', 'CLASSIC_POLQA_VOLTE_P10_MOS',
                 'CLASSIC_POLQA_VOLTE_P50_MOS', 'CLASSIC_POLQA_VOLTE_P90_MOS', 'WHATSAPP_POLQA_ATTEMPTS',
                 'WHATSAPP_POLQA_BAD', 'WHATSAPP_POLQA_BAD_RATIO', 'WHATSAPP_POLQA_MIN_MOS', 'WHATSAPP_POLQA_AVG_MOS',
                 'WHATSAPP_POLQA_MAX_MOS', 'WHATSAPP_POLQA_P10_MOS', 'WHATSAPP_POLQA_P50_MOS', 'WHATSAPP_POLQA_P90_MOS',
                 'HTTP_TRANSFER_LTE_RATIO', 'HTTP_TRANSFER_LTE_UL_64QAM_RATIO', 'HTTP_TRANSFER_LTE_DL_2564QAM RATIO',
                 'HTTP_TRANSFER_FDFS_DL_ATTEMPTS', 'HTTP_TRANSFER_FDFS_DL_FAILED', 'HTTP_TRANSFER_FDFS_DL_CUTOFF',
                 'HTTP_TRANSFER_FDFS_DL_SUCCESS', 'HTTP_TRANSFER_FDFS_DL_FAILED_RATIO',
                 'HTTP_TRANSFER_FDFS_DL_CUTOFF_RATIO', 'HTTP_TRANSFER_FDFS_DL_SUCCESS_RATIO',
                 'HTTP_TRANSFER_FDFS_UL_ATTEMPTS', 'HTTP_TRANSFER_FDFS_UL_FAILED', 'HTTP_TRANSFER_FDFS_UL_CUTOFF',
                 'HTTP_TRANSFER_FDFS_UL_SUCCESS', 'HTTP_TRANSFER_FDFS_UL_FAILED_RATIO',
                 'HTTP_TRANSFER_FDFS_UL_CUTOFF_RATIO', 'HTTP_TRANSFER_FDFS_UL_SUCCESS_RATIO',
                 'HTTP_TRANSFER_FDTT_DL_ATTEMPTS', 'HTTP_TRANSFER_FDTT_DL_FAILED', 'HTTP_TRANSFER_FDTT_DL_CUTOFF',
                 'HTTP_TRANSFER_FDTT_DL_SUCCESS', 'HTTP_TRANSFER_FDTT_DL_MDR_MIN', 'HTTP_TRANSFER_FDTT_DL_MDR_P10',
                 'HTTP_TRANSFER_FDTT_DL_MDR_AVG', 'HTTP_TRANSFER_FDTT_DL_MDR_P50', 'HTTP_TRANSFER_FDTT_DL_MDR_P90',
                 'HTTP_TRANSFER_FDTT_DL_MDR_MAX', 'HTTP_TRANSFER_FDTT_UL_ATTEMPTS', 'HTTP_TRANSFER_FDTT_UL_FAILED',
                 'HTTP_TRANSFER_FDTT_UL_CUTOFF', 'HTTP_TRANSFER_FDTT_UL_SUCCESS', 'HTTP_TRANSFER_FDTT_UL_MDR_MIN',
                 'HTTP_TRANSFER_FDTT_UL_MDR_P10', 'HTTP_TRANSFER_FDTT_UL_MDR_AVG', 'HTTP_TRANSFER_FDTT_UL_MDR_P50',
                 'HTTP_TRANSFER_FDTT_UL_MDR_P90', 'HTTP_TRANSFER_FDTT_UL_MDR_MAX', 'HTTP_BROWSING_ATTEMPTS',
                 'HTTP_BROWSING_FAILED', 'HTTP_BROWSING_CUTOFF', 'HTTP_BROWSING_SUCCESS', 'HTTP_BROWSING_FAILED_RATIO',
                 'HTTP_BROWSING_CUTOFF_RATIO', 'HTTP_BROWSING_SUCCESS_RATIO', 'HTTP_BROWSING_ROUNDTRIP_TIME_MIN',
                 'HTTP_BROWSING_ROUNDTRIP_TIME_P10', 'HTTP_BROWSING_ROUNDTRIP_TIME_AVG',
                 'HTTP_BROWSING_ROUNDTRIP_TIME_P50',
                 'HTTP_BROWSING_ROUNDTRIP_TIME_P90', 'HTTP_BROWSING_ROUNDTRIP_TIME_MAX',
                 'HTTP_BROWSING_CONTENT_TRANSFER_TIME_MIN', 'HTTP_BROWSING_CONTENT_TRANSFER_TIME_P10',
                 'HTTP_BROWSING_CONTENT_TRANSFER_TIME_AVG', 'HTTP_BROWSING_CONTENT_TRANSFER_TIME_P50',
                 'HTTP_BROWSING_CONTENT_TRANSFER_TIME_P90', 'HTTP_BROWSING_CONTENT_TRANSFER_TIME_MAX',
                 'VIDEO_STREAM_ATTEMPTS', 'VIDEO_STREAM_FAILED', 'VIDEO_STREAM_CUTOFF', 'VIDEO_STREAM_SUCCESS',
                 'VIDEO_STREAM_IRRITATING_PLAYOUT', 'VIDEO_STREAM_FAILED_RATIO', 'VIDEO_STREAM_CUTOFF_RATIO',
                 'VIDEO_STREAM_SUCCESS_RATIO', 'VIDEO_STREAM_IRRITATING_PLAYOUT_RATIO', 'VIDEO_STREAM_VMOS_MIN',
                 'VIDEO_STREAM_VMOS_P10', 'VIDEO_STREAM_VMOS_AVG', 'VIDEO_STREAM_VMOS_P50', 'VIDEO_STREAM_VMOS_P90',
                 'VIDEO_STREAM_VMOS_MAX', 'VIDEO_STREAM_VMOS_BAD', 'VIDEO_STREAM_VMOS_OKK',
                 'VIDEO_STREAM_VMOS_BAD_RATIO',
                 'VIDEO_STREAM_TTFP_MIN', 'VIDEO_STREAM_TTFP_P10', 'VIDEO_STREAM_TTFP_AVG', 'VIDEO_STREAM_TTFP_P50',
                 'VIDEO_STREAM_TTFP_P90', 'VIDEO_STREAM_TTFP_MAX', 'VIDEO_STREAM_TTFP_BAD', 'VIDEO_STREAM_TTFP_OKK',
                 'VIDEO_STREAM_TTFP_BAD_RATIO', 'FACEBOOK_FDFS_UL_ATTEMPTS', 'FACEBOOK_FDFS_UL_FAILED',
                 'FACEBOOK_FDFS_UL_CUTOFF', 'FACEBOOK_FDFS_UL_SUCCESS', 'FACEBOOK_FDFS_UL_FAILED_RATIO',
                 'FACEBOOK_FDFS_UL_CUTOFF_RATIO', 'FACEBOOK_FDFS_UL_SUCCESS_RATIO',
                 'FACEBOOK_FDFS_UL_TRANSFER_TIME_MIN',
                 'FACEBOOK_FDFS_UL_TRANSFER_TIME_P10', 'FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG',
                 'FACEBOOK_FDFS_UL_TRANSFER_TIME_P50', 'FACEBOOK_FDFS_UL_TRANSFER_TIME_P90',
                 'FACEBOOK_FDFS_UL_TRANSFER_TIME_MAX', 'CLASSIC_CSSR_THRESHOLDS_LOW', 'CLASSIC_DCR_THRESHOLDS_LOW',
                 'CLASSIC_AVG_CST_THRESHOLDS_LOW', 'CLASSIC_BAD_CST_RATIO_THRESHOLDS_LOW',
                 'WHATSAPP_CSSR_THRESHOLDS_LOW',
                 'WHATSAPP_DCR_THRESHOLDS_LOW', 'WHATSAPP_AVG_CST_THRESHOLDS_LOW',
                 'WHATSAPP_BAD_CST_RATIO_THRESHOLDS_LOW',
                 'CLASSIC_POLQA_BAD_RATIO_THRESHOLDS_LOW', 'CLASSIC_POLQA_AVG_MOS_THRESHOLDS_LOW',
                 'WHATSAPP_POLQA_BAD_RATIO_THRESHOLDS_LOW', 'WHATSAPP_POLQA_AVG_MOS_THRESHOLDS_LOW',
                 'HTTP_TRANSFER_FDFS_DL_SUCCESS_RATIO_THRESHOLDS_LOW',
                 'HTTP_TRANSFER_FDFS_UL_SUCCESS_RATIO_THRESHOLDS_LOW',
                 'HTTP_TRANSFER_FDTT_DL_MDR_P10_THRESHOLDS_LOW', 'HTTP_TRANSFER_FDTT_DL_MDR_AVG_THRESHOLDS_LOW',
                 'HTTP_TRANSFER_FDTT_UL_MDR_P10_THRESHOLDS_LOW', 'HTTP_TRANSFER_FDTT_UL_MDR_AVG_THRESHOLDS_LOW',
                 'HTTP_BROWSING_SUCCESS_RATIO_THRESHOLDS_LOW', 'VIDEO_STREAM_SUCCESS_RATIO_THRESHOLDS_LOW',
                 'VIDEO_STREAM_IRRITATING_PLAYOUT_RATIO_THRESHOLDS_LOW', 'VIDEO_STREAM_VMOS_AVG_THRESHOLDS_LOW',
                 'VIDEO_STREAM_TTFP_AVG_THRESHOLDS_LOW', 'VIDEO_STREAM_TTFP_BAD_RATIO_THRESHOLDS_LOW',
                 'FACEBOOK_FDFS_UL_SUCCESS_RATIO_THRESHOLDS_LOW', 'FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG_THRESHOLDS_LOW',
                 'CLASSIC_CSSR_THRESHOLDS_MEDIUM', 'CLASSIC_DCR_THRESHOLDS_MEDIUM', 'CLASSIC_AVG_CST_THRESHOLDS_MEDIUM',
                 'CLASSIC_BAD_CST_RATIO_THRESHOLDS_MEDIUM', 'WHATSAPP_CSSR_THRESHOLDS_MEDIUM',
                 'WHATSAPP_DCR_THRESHOLDS_MEDIUM', 'WHATSAPP_AVG_CST_THRESHOLDS_MEDIUM',
                 'WHATSAPP_BAD_CST_RATIO_THRESHOLDS_MEDIUM', 'CLASSIC_POLQA_BAD_RATIO_THRESHOLDS_MEDIUM',
                 'CLASSIC_POLQA_AVG_MOS_THRESHOLDS_MEDIUM', 'WHATSAPP_POLQA_BAD_RATIO_THRESHOLDS_MEDIUM',
                 'WHATSAPP_POLQA_AVG_MOS_THRESHOLDS_MEDIUM', 'HTTP_TRANSFER_FDFS_DL_SUCCESS_RATIO_THRESHOLDS_MEDIUM',
                 'HTTP_TRANSFER_FDFS_UL_SUCCESS_RATIO_THRESHOLDS_MEDIUM',
                 'HTTP_TRANSFER_FDTT_DL_MDR_P10_THRESHOLDS_MEDIUM',
                 'HTTP_TRANSFER_FDTT_DL_MDR_AVG_THRESHOLDS_MEDIUM', 'HTTP_TRANSFER_FDTT_UL_MDR_P10_THRESHOLDS_MEDIUM',
                 'HTTP_TRANSFER_FDTT_UL_MDR_AVG_THRESHOLDS_MEDIUM', 'HTTP_BROWSING_SUCCESS_RATIO_THRESHOLDS_MEDIUM',
                 'VIDEO_STREAM_SUCCESS_RATIO_THRESHOLDS_MEDIUM',
                 'VIDEO_STREAM_IRRITATING_PLAYOUT_RATIO_THRESHOLDS_MEDIUM',
                 'VIDEO_STREAM_VMOS_AVG_THRESHOLDS_MEDIUM', 'VIDEO_STREAM_TTFP_AVG_THRESHOLDS_MEDIUM',
                 'VIDEO_STREAM_TTFP_BAD_RATIO_THRESHOLDS_MEDIUM', 'FACEBOOK_FDFS_UL_SUCCESS_RATIO_THRESHOLDS_MEDIUM',
                 'FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG_THRESHOLDS_MEDIUM', 'CLASSIC_CSSR_THRESHOLDS_HIGH',
                 'CLASSIC_DCR_THRESHOLDS_HIGH', 'CLASSIC_AVG_CST_THRESHOLDS_HIGH',
                 'CLASSIC_BAD_CST_RATIO_THRESHOLDS_HIGH',
                 'WHATSAPP_CSSR_THRESHOLDS_HIGH', 'WHATSAPP_DCR_THRESHOLDS_HIGH', 'WHATSAPP_AVG_CST_THRESHOLDS_HIGH',
                 'WHATSAPP_BAD_CST_RATIO_THRESHOLDS_HIGH', 'CLASSIC_POLQA_BAD_RATIO_THRESHOLDS_HIGH',
                 'CLASSIC_POLQA_AVG_MOS_THRESHOLDS_HIGH', 'WHATSAPP_POLQA_BAD_RATIO_THRESHOLDS_HIGH',
                 'WHATSAPP_POLQA_AVG_MOS_THRESHOLDS_HIGH', 'HTTP_TRANSFER_FDFS_DL_SUCCESS_RATIO_THRESHOLDS_HIGH',
                 'HTTP_TRANSFER_FDFS_UL_SUCCESS_RATIO_THRESHOLDS_HIGH', 'HTTP_TRANSFER_FDTT_DL_MDR_P10_THRESHOLDS_HIGH',
                 'HTTP_TRANSFER_FDTT_DL_MDR_AVG_THRESHOLDS_HIGH', 'HTTP_TRANSFER_FDTT_UL_MDR_P10_THRESHOLDS_HIGH',
                 'HTTP_TRANSFER_FDTT_UL_MDR_AVG_THRESHOLDS_HIGH', 'HTTP_BROWSING_SUCCESS_RATIO_THRESHOLDS_HIGH',
                 'VIDEO_STREAM_SUCCESS_RATIO_THRESHOLDS_HIGH', 'VIDEO_STREAM_IRRITATING_PLAYOUT_RATIO_THRESHOLDS_HIGH',
                 'VIDEO_STREAM_VMOS_AVG_THRESHOLDS_HIGH', 'VIDEO_STREAM_TTFP_AVG_THRESHOLDS_HIGH',
                 'VIDEO_STREAM_TTFP_BAD_RATIO_THRESHOLDS_HIGH', 'FACEBOOK_FDFS_UL_SUCCESS_RATIO_THRESHOLDS_HIGH',
                 'FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG_THRESHOLDS_HIGH', 'CLASSIC_CSSR_MAXIMUM_POINTS',
                 'CLASSIC_DCR_MAXIMUM_POINTS', 'CLASSIC_AVG_CST_MAXIMUM_POINTS', 'CLASSIC_BAD_CST_RATIO_MAXIMUM_POINTS',
                 'WHATSAPP_CSSR_MAXIMUM_POINTS', 'WHATSAPP_DCR_MAXIMUM_POINTS', 'WHATSAPP_AVG_CST_MAXIMUM_POINTS',
                 'WHATSAPP_BAD_CST_RATIO_MAXIMUM_POINTS', 'CLASSIC_POLQA_BAD_RATIO_MAXIMUM_POINTS',
                 'CLASSIC_POLQA_AVG_MOS_MAXIMUM_POINTS', 'WHATSAPP_POLQA_BAD_RATIO_MAXIMUM_POINTS',
                 'WHATSAPP_POLQA_AVG_MOS_MAXIMUM_POINTS', 'HTTP_TRANSFER_FDFS_DL_SUCCESS_RATIO_MAXIMUM_POINTS',
                 'HTTP_TRANSFER_FDFS_UL_SUCCESS_RATIO_MAXIMUM_POINTS', 'HTTP_TRANSFER_FDTT_DL_MDR_P10_MAXIMUM_POINTS',
                 'HTTP_TRANSFER_FDTT_DL_MDR_AVG_MAXIMUM_POINTS', 'HTTP_TRANSFER_FDTT_UL_MDR_P10_MAXIMUM_POINTS',
                 'HTTP_TRANSFER_FDTT_UL_MDR_AVG_MAXIMUM_POINTS', 'HTTP_BROWSING_SUCCESS_RATIO_MAXIMUM_POINTS',
                 'VIDEO_STREAM_SUCCESS_RATIO_MAXIMUM_POINTS', 'VIDEO_STREAM_IRRITATING_PLAYOUT_RATIO_MAXIMUM_POINTS',
                 'VIDEO_STREAM_VMOS_AVG_MAXIMUM_POINTS', 'VIDEO_STREAM_TTFP_AVG_MAXIMUM_POINTS',
                 'VIDEO_STREAM_TTFP_BAD_RATIO_MAXIMUM_POINTS', 'FACEBOOK_FDFS_UL_SUCCESS_RATIO_MAXIMUM_POINTS',
                 'FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG_MAXIMUM_POINTS', 'CLASSIC_CSSR_RANKING', 'CLASSIC_DCR_RANKING',
                 'CLASSIC_AVG_CST_RANKING', 'CLASSIC_BAD_CST_RATIO_RANKING', 'WHATSAPP_CSSR_RANKING',
                 'WHATSAPP_DCR_RANKING', 'WHATSAPP_AVG_CST_RANKING', 'WHATSAPP_BAD_CST_RATIO_RANKING',
                 'CLASSIC_POLQA_BAD_RATIO_RANKING', 'CLASSIC_POLQA_AVG_MOS_RANKING', 'WHATSAPP_POLQA_BAD_RATIO_RANKING',
                 'WHATSAPP_POLQA_AVG_MOS_RANKING', 'HTTP_TRANSFER_FDFS_DL_SUCCESS_RATIO_RANKING',
                 'HTTP_TRANSFER_FDFS_UL_SUCCESS_RATIO_RANKING', 'HTTP_TRANSFER_FDTT_DL_MDR_P10_RANKING',
                 'HTTP_TRANSFER_FDTT_DL_MDR_AVG_RANKING', 'HTTP_TRANSFER_FDTT_UL_MDR_P10_RANKING',
                 'HTTP_TRANSFER_FDTT_UL_MDR_AVG_RANKING', 'HTTP_BROWSING_SUCCESS_RATIO_RANKING',
                 'VIDEO_STREAM_SUCCESS_RATIO_RANKING', 'VIDEO_STREAM_IRRITATING_PLAYOUT_RATIO_RANKING',
                 'VIDEO_STREAM_VMOS_AVG_RANKING', 'VIDEO_STREAM_TTFP_AVG_RANKING',
                 'VIDEO_STREAM_TTFP_BAD_RATIO_RANKING',
                 'FACEBOOK_FDFS_UL_SUCCESS_RATIO_RANKING', 'FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG_RANKING',
                 'CLASSIC_CSSR_GAP',
                 'CLASSIC_DCR_GAP', 'CLASSIC_AVG_CST_GAP', 'CLASSIC_BAD_CST_RATIO_GAP', 'WHATSAPP_CSSR_GAP',
                 'WHATSAPP_DCR_GAP', 'WHATSAPP_AVG_CST_GAP', 'WHATSAPP_BAD_CST_RATIO_GAP',
                 'CLASSIC_POLQA_BAD_RATIO_GAP',
                 'CLASSIC_POLQA_AVG_MOS_GAP', 'WHATSAPP_POLQA_BAD_RATIO_GAP', 'WHATSAPP_POLQA_AVG_MOS_GAP',
                 'HTTP_TRANSFER_FDFS_DL_SUCCESS_RATIO_GAP', 'HTTP_TRANSFER_FDFS_UL_SUCCESS_RATIO_GAP',
                 'HTTP_TRANSFER_FDTT_DL_MDR_P10_GAP', 'HTTP_TRANSFER_FDTT_DL_MDR_AVG_GAP',
                 'HTTP_TRANSFER_FDTT_UL_MDR_P10_GAP', 'HTTP_TRANSFER_FDTT_UL_MDR_AVG_GAP',
                 'HTTP_BROWSING_SUCCESS_RATIO_GAP', 'VIDEO_STREAM_SUCCESS_RATIO_GAP',
                 'VIDEO_STREAM_IRRITATING_PLAYOUT_RATIO_GAP', 'VIDEO_STREAM_VMOS_AVG_GAP', 'VIDEO_STREAM_TTFP_AVG_GAP',
                 'VIDEO_STREAM_TTFP_BAD_RATIO_GAP', 'FACEBOOK_FDFS_UL_SUCCESS_RATIO_GAP',
                 'FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG_GAP',
                 # POINTS LOST METHOD 1 : ALSO NEGATIVE VALUES AS CONTRIBUTION
                 'CLASSIC_CSSR_POINTS_LOST',
                 'CLASSIC_DCR_POINTS_LOST',
                 'CLASSIC_AVG_CST_POINTS_LOST',
                 'CLASSIC_BAD_CST_RATIO_POINTS_LOST',
                 'WHATSAPP_CSSR_POINTS_LOST',
                 'WHATSAPP_DCR_POINTS_LOST',
                 'WHATSAPP_AVG_CST_POINTS_LOST',
                 'WHATSAPP_BAD_CST_RATIO_POINTS_LOST',
                 'CLASSIC_POLQA_BAD_RATIO_POINTS_LOST',
                 'CLASSIC_POLQA_AVG_MOS_POINTS_LOST',
                 'WHATSAPP_POLQA_BAD_RATIO_POINTS_LOST',
                 'WHATSAPP_POLQA_AVG_MOS_POINTS_LOST',
                 'HTTP_TRANSFER_FDFS_DL_SUCCESS_RATIO_POINTS_LOST',
                 'HTTP_TRANSFER_FDFS_UL_SUCCESS_RATIO_POINTS_LOST',
                 'HTTP_TRANSFER_FDTT_DL_MDR_P10_POINTS_LOST',
                 'HTTP_TRANSFER_FDTT_DL_MDR_AVG_POINTS_LOST',
                 'HTTP_TRANSFER_FDTT_UL_MDR_P10_POINTS_LOST',
                 'HTTP_TRANSFER_FDTT_UL_MDR_AVG_POINTS_LOST',
                 'HTTP_BROWSING_SUCCESS_RATIO_POINTS_LOST',
                 'VIDEO_STREAM_SUCCESS_RATIO_POINTS_LOST',
                 'VIDEO_STREAM_IRRITATING_PLAYOUT_POINTS_LOST',
                 'VIDEO_STREAM_VMOS_AVG_POINTS_LOST',
                 'VIDEO_STREAM_TTFP_AVG_POINTS_LOST',
                 'VIDEO_STREAM_TTFP_BAD_RATIO_POINTS_LOST',
                 'FACEBOOK_FDFS_UL_SUCCESS_RATIO_POINTS_LOST',
                 'FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG_POINTS_LOST',
                 # POINTS LOST METHOD 2 : INTEGRITY KPI-S NORMALIZED JUST WITH SAMPLES
                 'CLASSIC_CSSR_POINTS_LOST_M2',
                 'CLASSIC_DCR_POINTS_LOST_M2',
                 'CLASSIC_AVG_CST_POINTS_LOST_M2',
                 'CLASSIC_BAD_CST_RATIO_POINTS_LOST_M2',
                 'WHATSAPP_CSSR_POINTS_LOST_M2',
                 'WHATSAPP_DCR_POINTS_LOST_M2',
                 'WHATSAPP_AVG_CST_POINTS_LOST_M2',
                 'WHATSAPP_BAD_CST_RATIO_POINTS_LOST_M2',
                 'CLASSIC_POLQA_BAD_RATIO_POINTS_LOST_M2',
                 'CLASSIC_POLQA_AVG_MOS_POINTS_LOST_M2',
                 'WHATSAPP_POLQA_BAD_RATIO_POINTS_LOST_M2',
                 'WHATSAPP_POLQA_AVG_MOS_POINTS_LOST_M2',
                 'HTTP_TRANSFER_FDFS_DL_SUCCESS_RATIO_POINTS_LOST_M2',
                 'HTTP_TRANSFER_FDFS_UL_SUCCESS_RATIO_POINTS_LOST_M2',
                 'HTTP_TRANSFER_FDTT_DL_MDR_P10_POINTS_LOST_M2',
                 'HTTP_TRANSFER_FDTT_DL_MDR_AVG_POINTS_LOST_M2',
                 'HTTP_TRANSFER_FDTT_UL_MDR_P10_POINTS_LOST_M2',
                 'HTTP_TRANSFER_FDTT_UL_MDR_AVG_POINTS_LOST_M2',
                 'HTTP_BROWSING_SUCCESS_RATIO_POINTS_LOST_M2',
                 'VIDEO_STREAM_SUCCESS_RATIO_POINTS_LOST_M2',
                 'VIDEO_STREAM_IRRITATING_PLAYOUT_POINTS_LOST_M2',
                 'VIDEO_STREAM_VMOS_AVG_POINTS_LOST_M2',
                 'VIDEO_STREAM_TTFP_AVG_POINTS_LOST_M2',
                 'VIDEO_STREAM_TTFP_BAD_RATIO_POINTS_LOST_M2',
                 'FACEBOOK_FDFS_UL_SUCCESS_RATIO_POINTS_LOST_M2',
                 'FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG_POINTS_LOST_M2']]


    def ranking_calculate(self, g_lev_1, g_lev_2, kpi_value, kpi_key, ranking_params_df):
        rank = ranking_params_df[ranking_params_df.G_LEVEL_1 == g_lev_1]
        rank = rank[rank.G_LEVEL_2 == g_lev_2]
        rank = rank[rank.prim_key == kpi_key]
        if not (rank.empty):
            if rank.THRESHOLD_MIN.iloc[0] <= rank.THRESHOLD_MED.iloc[0]:
                if kpi_value < rank.THRESHOLD_MIN.iloc[0]:
                    ranking = 0.0
                elif kpi_value >= rank.THRESHOLD_MIN.iloc[0] and kpi_value < rank.THRESHOLD_MED.iloc[0]:
                    ranking = 0.8 * rank.RANKING_MAX.iloc[0] * (kpi_value - rank.THRESHOLD_MIN.iloc[0]) / (
                                rank.THRESHOLD_MED.iloc[0] - rank.THRESHOLD_MIN.iloc[0])
                elif kpi_value >= rank.THRESHOLD_MED.iloc[0] and kpi_value < rank.THRESHOLD_HGH.iloc[0]:
                    ranking = 0.2 * rank.RANKING_MAX.iloc[0] * (kpi_value - rank.THRESHOLD_MED.iloc[0]) / (
                                rank.THRESHOLD_HGH.iloc[0] - rank.THRESHOLD_MED.iloc[0]) + 0.8 * rank.RANKING_MAX.iloc[
                                  0]
                else:
                    ranking = rank.RANKING_MAX.iloc[0]
                return [rank.THRESHOLD_MIN.iloc[0], rank.THRESHOLD_MED.iloc[0], rank.THRESHOLD_HGH.iloc[0],
                        rank.RANKING_MAX.iloc[0], ranking, rank.RANKING_MAX.iloc[0] - ranking]
            elif rank.THRESHOLD_MIN.iloc[0] > rank.THRESHOLD_MED.iloc[0]:
                if kpi_value > rank.THRESHOLD_MIN.iloc[0]:
                    ranking = 0.0
                elif kpi_value <= rank.THRESHOLD_MIN.iloc[0] and kpi_value > rank.THRESHOLD_MED.iloc[0]:
                    ranking = 0.8 * rank.RANKING_MAX.iloc[0] * (kpi_value - rank.THRESHOLD_MIN.iloc[0]) / (
                                rank.THRESHOLD_MED.iloc[0] - rank.THRESHOLD_MIN.iloc[0])
                elif kpi_value <= rank.THRESHOLD_MED.iloc[0] and kpi_value > rank.THRESHOLD_HGH.iloc[0]:
                    ranking = 0.2 * rank.RANKING_MAX.iloc[0] * (kpi_value - rank.THRESHOLD_MED.iloc[0]) / (
                                rank.THRESHOLD_HGH.iloc[0] - rank.THRESHOLD_MED.iloc[0]) + 0.8 * rank.RANKING_MAX.iloc[
                                  0]
                else:
                    ranking = rank.RANKING_MAX.iloc[0]
                return [rank.THRESHOLD_MIN.iloc[0], rank.THRESHOLD_MED.iloc[0], rank.THRESHOLD_HGH.iloc[0],
                        rank.RANKING_MAX.iloc[0], ranking, rank.RANKING_MAX.iloc[0] - ranking]
            else:
                return [None, None, None, None, None, None]
        else:
            return [None, None, None, None, None, None]

# CLASS NORMALIZE GAPS PER UNIT
class Gaps:
    def __init__(self, modules):
        self.ranking_modules = modules
        # delete unnecessary junk
        del self.ranking_modules['kpi_levels']
        del self.ranking_modules['grp_index']
        del self.ranking_modules['G_LEVEL_3']
        del self.ranking_modules['G_LEVEL_4']
        del self.ranking_modules['G_LEVEL_5']
        del self.ranking_modules['TRAIN_INFO']
        del self.ranking_modules['VENDOR']
        del self.ranking_modules['START_TIME']
        del self.ranking_modules['END_TIME']
        del self.ranking_modules['RANKING_CLASSIC_CSSR']
        del self.ranking_modules['RANKING_CLASSIC_DCR']
        del self.ranking_modules['RANKING_CLASSIC_AVG_CST']
        del self.ranking_modules['RANKING_CLASSIC_BAD_CST_RATIO']
        del self.ranking_modules['RANKING_WHATSAPP_CSSR']
        del self.ranking_modules['RANKING_WHATSAPP_DCR']
        del self.ranking_modules['RANKING_WHATSAPP_AVG_CST']
        del self.ranking_modules['RANKING_WHATSAPP_BAD_CST_RATIO']
        del self.ranking_modules['RANKING_CLASSIC_POLQA_BAD_RATIO']
        del self.ranking_modules['RANKING_CLASSIC_POLQA_AVG_MOS']
        del self.ranking_modules['RANKING_WHATSAPP_POLQA_BAD_RATIO']
        del self.ranking_modules['RANKING_WHATSAPP_POLQA_AVG_MOS']
        del self.ranking_modules['RANKING_HTTP_TRANSFER_FDFS_DL_SUCCESS_RATIO']
        del self.ranking_modules['RANKING_HTTP_TRANSFER_FDFS_UL_SUCCESS_RATIO']
        del self.ranking_modules['RANKING_HTTP_TRANSFER_FDTT_DL_MDR_P10']
        del self.ranking_modules['RANKING_HTTP_TRANSFER_FDTT_DL_MDR_AVG']
        del self.ranking_modules['RANKING_HTTP_TRANSFER_FDTT_UL_MDR_P10']
        del self.ranking_modules['RANKING_HTTP_TRANSFER_FDTT_UL_MDR_AVG']
        del self.ranking_modules['RANKING_HTTP_BROWSING_SUCCESS_RATIO']
        del self.ranking_modules['RANKING_VIDEO_STREAM_SUCCESS_RATIO']
        del self.ranking_modules['RANKING_VIDEO_STREAM_IRRITATING_PLAYOUT_RATIO']
        del self.ranking_modules['RANKING_VIDEO_STREAM_VMOS_AVG']
        del self.ranking_modules['RANKING_VIDEO_STREAM_TTFP_AVG']
        del self.ranking_modules['RANKING_VIDEO_STREAM_TTFP_BAD_RATIO']
        del self.ranking_modules['RANKING_FACEBOOK_FDFS_UL_SUCCESS_RATIO']
        del self.ranking_modules['RANKING_FACEBOOK_FDFS_UL_TRANSFER_TIME_AVG']

# FUNCTION - WRITE TO EXCEL TO AVOID CODE REPRETITIONS
########################################################################################################################
def write_pd(df_tmp,book,sheet_name):
    sheet_tmp = book.create_sheet(sheet_name)
    j = 1
    for v in list(df_tmp.columns.values):
        try:
            sheet_tmp.cell(row=1, column=j).value = v
            sheet_tmp.title = sheet_name
        except:
            print('Header Printing Failed')
            pass
        j += 1
    i = 1
    for value in list(df_tmp):
        j = 2
        for v in list(df_tmp[value]):
            try:
                sheet_tmp.cell(row=j, column=i).value = v
            except:
                print('Writting in row', i, ' and collumn ', j, 'FAILED!')
                pass
            j += 1
        i += 1

gap_views = []
# OPERATOR 2
op = OperatorKPIs(server       = "blndb11",
                  database     = "DE_BM_Voice_1905",
                  table        = 'NEW_KPI_OPERATOR_2')
gap_views.append(op)
del op

# go through all operators and extract all possible GeoLocation Information
for op in gap_views:
    print('CONNECTING...\n',
          '\nSERVER            : ',op.server,
          '\nVOICE DB          : ',op.database,
          '\nDATA DB           : ',op.table)
    try:
        # DATABASE CONNECTION
        print('ATTEMPTING DB CONNECTION!')
        db = pyodbc.connect(r'Driver={SQL Server};Server=%s;Database=%s;Trusted_Connection=yes;' %( op.server, op.database ) )
        cur = db.cursor()

        # GET KPI REPORT
        print("DB CONNECTED, GETTING KPI REPORT...")
        kpi_report  = pd.read_sql("SELECT * FROM " + op.table, db)
        kpi_report = kpi_report[ck.column_order()]
        print("DB CONNECTED, GETTING KPI REPORT IMPORTED!")

        # GET RANKING PARAMETERS
        print('Reading Ranking Parameters!')
        ranking_param = pd.read_sql("SELECT * FROM RANKING_PARAMS_2019", db)
        print('Reading Ranking Parameters COMPLETED!')
    except:
        print('\n...KPI REPORT EXTRACTION FAILED!')
        exit()

    try:
        ranking = Ranking(kpi_report,ranking_param)
        print('CALCUALTION COMPLETED!')
    except:
        print('CALCULATION FAILED!')

    # WRITE KPI REPORT AS IN DATABASE
    book = Workbook()
    write_pd(kpi_report, book, 'KPI_REPORT')
    write_pd(ranking_param, book, 'RANKING_PARAMETER')
    write_pd(ranking.df_with_ranking, book, 'CLASSIC_RANKING')
        # write_pd(gap_units.ranking_modules, book, 'MODULE_TOTAL')
    book.save('gap_report.xlsx')

        # print(list(ranking_param.columns.values) )
